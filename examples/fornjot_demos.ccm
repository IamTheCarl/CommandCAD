
solid cuboid(x: Length, y: Length, z: Length) {
  let base_sketch = new_sketch(Polygon { points = [
      vec2(-x / 2., -y / 2.),
      vec2(x / 2., -y / 2.),
      vec2(x / 2., y / 2.),
      vec2(-x / 2., y / 2.)
      ],
      surface = global_xy_plane()
    });

  base_sketch.sweep(global_xy_plane(), vec3(0cm, 0cm, z))
}

solid holes(hole_radius: Length) {
  let size = hole_radius * 4;
  let cube = cuboid(size * 2, size, size);

  let cube = cube.update_shell(cube.shells[0], [hole_radius, size](shell: Shell) -> Shell {
    let offset = size / 2;
    let depth = size / 2;

    let bottom_face = shell.faces[0];
    let shell = shell.add_blind_hole(bottom_face, vec2(-offset, 0mm), hole_radius, vec3(0mm, 0mm, depth));

    let bottom_face = shell.faces[0];
    let top_face = shell.faces[5];
    let shell = shell.add_through_hole(bottom_face, vec2(offset, 0mm), top_face, vec2(offset, 0mm), hole_radius);

    [shell]
  });

  cube
}

solid spacer(outer_radius: Length, inner_radius: Length, height: Length) {
    let bottom_surface = global_xy_plane();
    let sweep_path = vec3(0mm, 0mm, height);

    let base_sketch = new_sketch(global_xy_plane(), [
      new_region(RawRegion {
          exterior = new_cycle(Circle { center = vec2(0mm, 0mm), radius = outer_radius, surface = global_xy_plane() }),
	  interiors = [new_cycle(Circle { center = vec2(0mm, 0mm), radius = inner_radius, surface = global_xy_plane() }).reverse()],
      })
    ]);

    base_sketch.sweep(bottom_surface, sweep_path)
}

solid star(num_points: Number, r1: Length, r2: Length, h: Length) {
  let num_verticies = num_points * 2;

  let outer_points = [];
  let inner_points = [];

  for index in 0..num_verticies {
    let angle = 2rad / num_verticies * index;
    
    // TODO We need to add support for the modulous operator.
    let radius = if (index / 2).fract() == 0 { r1 } else { r2 };

    let normal_vector = angle.sin_cos();
    let point = normal_vector * radius;
    
    outer_points.append([point]);
    inner_points.append([point / 2]);
  }

  let bottom_surface = global_xy_plane();
  let sweep_path = vec3(0mm, 0mm, h);

  let exterior = new_cycle(Polygon { points = outer_points, surface = global_xy_plane() });
  let interiors = [ new_cycle(Polygon { points = inner_points, surface = global_xy_plane() }).reverse() ];
  
  let base = new_sketch(global_xy_plane(), [new_region(RawRegion {
    exterior = exterior,
    interiors = interiors,
  })]);

  base.sweep(bottom_surface, sweep_path)
}

// Further demos are not yet possible with the current limitations of the language.